// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")  // La variabile .env sarà la stessa
}

model Pokemon {
  id        Int      @id @default(autoincrement())
  name      String
  number    Int      @unique
  types     Type[]   @relation("PokemonTypes")
  abilities Ability[] @relation("PokemonAbilities")
  evolvesFrom Evolution? @relation("PokemonEvolutionTo") // Pokémon da cui questo evolve
  evolvesTo   Evolution? @relation("PokemonEvolutionFrom") // Pokémon in cui questo evolve
  subtype       String?   // Sottotipo (es. Seed Pokémon)
  height        Float?    // Altezza in metri
  weight        Float?    // Peso in kg
  description   String?   // Descrizione del Pokémon
  hp            Int?
  atk           Int?
  def           Int?
  spAtk         Int?
  spDef         Int?
  speed         Int?
  firstAbility  Ability?  @relation("FirstAbility", fields: [firstAbilityId], references: [id])
  firstAbilityId Int?
  secondAbility Ability?  @relation("SecondAbility", fields: [secondAbilityId], references: [id])
  secondAbilityId Int?
  hiddenAbility Ability?  @relation("HiddenAbility", fields: [hiddenAbilityId], references: [id])
  hiddenAbilityId Int?
  learnSets     LearnSet[]
}

model Type {
  id       Int      @id @default(autoincrement())
  name     String   @unique
  pokemons Pokemon[] @relation("PokemonTypes")
  moves    Move[] @relation("MoveTypes") // Relazione inversa per abilities
}

model Ability {
  id             Int         @id @default(autoincrement())
  name           String      @unique
  description    String?     // Descrizione dell'abilità
  pokemons       Pokemon[]   @relation("PokemonAbilities")
  firstAbility   Pokemon[]   @relation("FirstAbility")  // Relazione inversa per firstAbility
  secondAbility  Pokemon[]   @relation("SecondAbility") // Relazione inversa per secondAbility
  hiddenAbility  Pokemon[]   @relation("HiddenAbility") // Relazione inversa per hiddenAbility
}

model Move {
  id            Int      @id @default(autoincrement())
  name          String   @unique
  description   String?  // Descrizione dell'abilità
  power         Int?     // Potenza dell'abilità
  accuracy      Int?     // Precisione dell'abilità
  pp            Int?     // PP dell'abilità
  types         Type[]   @relation("MoveTypes") // Relazione con i tipi
  learnSets     LearnSet[]  // Relazione inversa per LearnSet
}

model Evolution {
  id          Int     @id @default(autoincrement())
  pokemonId   Int     @unique
  evolvesInto Int     @unique
  pokemon     Pokemon @relation("PokemonEvolutionFrom", fields: [pokemonId], references: [id])
  evolvesTo   Pokemon @relation("PokemonEvolutionTo", fields: [evolvesInto], references: [id])
}

model LearnSet {
  id          Int      @id @default(autoincrement())
  level       Int? // Livello al quale l'abilità è appresa
  tmTr        String? // TM/TR da cui l'abilità è appresa
  tutor       Boolean? // Se l'abilità è imparata tramite move tutor
  breeding    Boolean? // Se l'abilità è imparata tramite accoppiamento
  pokemonId   Int
  moveId      Int
  pokemon     Pokemon  @relation(fields: [pokemonId], references: [id])
  move        Move  @relation(fields: [moveId], references: [id])
}